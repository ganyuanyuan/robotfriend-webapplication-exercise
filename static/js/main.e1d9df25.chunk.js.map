{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","children","Component","Scroll","style","overflowY","border","height","App","_this2","fetch","then","response","json","users","_this$props","searchField","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","React","connect","dispatch","event","payload","target","value","initialState","store","createStore","arguments","undefined","action","assign","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1d9df25.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = ({id, name,email}) => {\n  return(\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\nexport default Card;\n","import React from 'react';\nimport Card from './Card.js';\n\n\n\nconst CardList = ({robots}) => {\n  return (\n    <div>\n    {\n      robots.map((user,i) =>{\n        return  (\n          <Card\n          key={i}\n          id={robots[i].id}\n          name={robots[i].name}\n          email={robots[i].email}\n          />\n        );\n      })\n    }\n    </div>\n  );\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchChange})=>{\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props){\n    super(props);\n    this.state ={\n      hasError: false,\n    }\n  }\n\n  componentDidCatch(error, info){\n    this.setState({hasError:true})\n  }\n\n  render(){\n    if (this.state.hasError){\n      return <h1>That is not good</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundry;\n","import React from 'react';\n\nconst Scroll = (props) =>{\n  return (\n    <div style={{overflowY:'scroll', border:'1px solid black',height:'800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList.js';\nimport SearchBox from '../components/SearchBox.js';\nimport ErrorBoundry from '../components/ErrorBoundry.js';\nimport Scroll from '../components/Scroll.js';\nimport './App.css';\n\nimport {setSearchField} from '../actions.js';\n\nconst mapStateToProps = state =>{\n  return {\n    searchField: state.searchField\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {onSearchChange: (event) => dispatch(setSearchField(event.target.value))\n  }\n}\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      robots:[],\n    }\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=>response.json())\n      .then(users => this.setState({robots:users}))\n  }\n\n  render(){\n    const {robots}= this.state;\n    const { searchField , onSearchChange} = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return !robots.length ?\n      <h1>Loading...</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots}/>\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {CHANGE_SEARCH_FIELD} from './constants.js';\n\nexport const setSearchField = (text) => ({\n  type:  CHANGE_SEARCH_FIELD,\n  payload: text\n})\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n","import {CHANGE_SEARCH_FIELD} from './constants.js';\n\nconst initialState = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialState, action={}) => {\n  switch(action.type){\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {searchField: action.payload});\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport './index.css';\nimport App from './containers/App.js'\nimport {searchRobots} from './reducers.js';\n\nconst store = createStore(searchRobots)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}